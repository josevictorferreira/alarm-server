# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec-memory` gem.
# Please instead update this file by running `bin/tapioca gem rspec-memory`.


# source://rspec-memory//lib/rspec/memory/trace.rb#9
module RSpec
  class << self
    # source://rspec-core/3.13.3/lib/rspec/core.rb#70
    def clear_examples; end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#85
    def configuration; end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#49
    def configuration=(_arg0); end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#97
    def configure; end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#194
    def const_missing(name); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def context(*args, &example_group_block); end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#122
    def current_example; end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#128
    def current_example=(example); end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#154
    def current_scope; end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#134
    def current_scope=(scope); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def describe(*args, &example_group_block); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def example_group(*args, &example_group_block); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def fcontext(*args, &example_group_block); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def fdescribe(*args, &example_group_block); end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#58
    def reset; end

    # source://rspec-core/3.13.3/lib/rspec/core/shared_example_group.rb#110
    def shared_context(name, *args, &block); end

    # source://rspec-core/3.13.3/lib/rspec/core/shared_example_group.rb#110
    def shared_examples(name, *args, &block); end

    # source://rspec-core/3.13.3/lib/rspec/core/shared_example_group.rb#110
    def shared_examples_for(name, *args, &block); end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#160
    def world; end

    # source://rspec-core/3.13.3/lib/rspec/core.rb#49
    def world=(_arg0); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def xcontext(*args, &example_group_block); end

    # source://rspec-core/3.13.3/lib/rspec/core/dsl.rb#42
    def xdescribe(*args, &example_group_block); end
  end
end

# source://rspec-memory//lib/rspec/memory/trace.rb#10
module RSpec::Memory; end

# source://rspec-memory//lib/rspec/memory/trace.rb#11
class RSpec::Memory::Allocation < ::Struct
  # source://rspec-memory//lib/rspec/memory/trace.rb#14
  def <<(object); end

  # Returns the value of attribute count
  #
  # @return [Object] the current value of count
  def count; end

  # Sets the attribute count
  #
  # @param value [Object] the value to set the attribute count to.
  # @return [Object] the newly set value
  def count=(_); end

  # Returns the value of attribute size
  #
  # @return [Object] the current value of size
  def size; end

  # Sets the attribute size
  #
  # @param value [Object] the value to set the attribute size to.
  # @return [Object] the newly set value
  def size=(_); end

  class << self
    def [](*_arg0); end

    # source://rspec-memory//lib/rspec/memory/trace.rb#21
    def default_hash; end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#12
module RSpec::Memory::Matchers
  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#93
  def limit_allocations(count: T.unsafe(nil), size: T.unsafe(nil), **allocations); end
end

# source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#13
class RSpec::Memory::Matchers::LimitAllocations
  include ::RSpec::Matchers::Composable

  # @return [LimitAllocations] a new instance of LimitAllocations
  #
  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#16
  def initialize(allocations = T.unsafe(nil), count: T.unsafe(nil), size: T.unsafe(nil)); end

  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#87
  def failure_message; end

  # @return [Boolean]
  #
  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#51
  def matches?(given_proc); end

  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#32
  def of(klass, **limits); end

  # @return [Boolean]
  #
  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#28
  def supports_block_expectations?; end

  private

  # source://rspec-memory//lib/rspec/memory/matchers/limit_allocations.rb#38
  def check(value, limit); end
end

# source://rspec-memory//lib/rspec/memory/trace.rb#12
RSpec::Memory::SLOT_SIZE = T.let(T.unsafe(nil), Integer)

# source://rspec-memory//lib/rspec/memory/trace.rb#26
class RSpec::Memory::Trace
  # @return [Trace] a new instance of Trace
  #
  # source://rspec-memory//lib/rspec/memory/trace.rb#48
  def initialize(klasses); end

  # Returns the value of attribute allocated.
  #
  # source://rspec-memory//lib/rspec/memory/trace.rb#59
  def allocated; end

  # source://rspec-memory//lib/rspec/memory/trace.rb#82
  def capture(&block); end

  # source://rspec-memory//lib/rspec/memory/trace.rb#66
  def current_objects(generation); end

  # source://rspec-memory//lib/rspec/memory/trace.rb#78
  def find_base(object); end

  # Returns the value of attribute ignored.
  #
  # source://rspec-memory//lib/rspec/memory/trace.rb#62
  def ignored; end

  # Returns the value of attribute retained.
  #
  # source://rspec-memory//lib/rspec/memory/trace.rb#60
  def retained; end

  # Returns the value of attribute total.
  #
  # source://rspec-memory//lib/rspec/memory/trace.rb#64
  def total; end

  class << self
    # source://rspec-memory//lib/rspec/memory/trace.rb#35
    def capture(*args, &block); end

    # @return [Boolean]
    #
    # source://rspec-memory//lib/rspec/memory/trace.rb#27
    def supported?; end
  end
end
